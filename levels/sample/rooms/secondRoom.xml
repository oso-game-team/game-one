<!-- This file describes the first room. Normally I break each room into its
own self-contained file. This isn't fundamentally necessary, but it's very
natural. It also allows you to very easily load content only once a room 
is entered for the first time. -->
<sburb description="second room">

<dependencies>
	<dependency>chars/posty.xml</dependency> <!-- loading in everything posty entails -->
</dependencies>

<assets>
	<asset name='Room02_0_0' type='graphic'>backgrounds/slices/Room02_0_0.png</asset>
	<asset name='Room02_0_1' type='graphic'>backgrounds/slices/Room02_0_1.png</asset>
	<asset name='Room02_1_0' type='graphic'>backgrounds/slices/Room02_1_0.png</asset>
	<asset name='Room02_1_1' type='graphic'>backgrounds/slices/Room02_1_1.png</asset>
	<asset name='Room02_2_0' type='graphic'>backgrounds/slices/Room02_2_0.png</asset>
	<asset name='Room02_2_1' type='graphic'>backgrounds/slices/Room02_2_1.png</asset>

	<asset name='Room02Map' type='graphic'>backgrounds/Room02Map.png</asset>
	<asset name='key' type='graphic'>objects/items/object02.png</asset>
</assets>


<!-- We wrap all room tags in the rooms tag. This is mostly useless since it's
not good practice to keep multiple rooms in one file, but hey, better
safe than sorry.-->
<rooms>
	<room name='Room02' walkableMap='Room02Map' scale='4'>

		<!-- Basic format for how room changing works.
		The argument of the <trigger> tag has to be a lambda expression basically that defines
		a range of positions that will cause the trigger to activate, thereby triggering the
		changeRoomRemote command. -->
		<triggers>
  			<trigger>spriteProperty,char,x&lt;40
	  			<action command='changeRoomRemote'>rooms/firstRoom.xml,Room01,1200,400</action>
	  		</trigger>
  		</triggers>

		<sprite name = 'key' x='627' y='210' height = '50' width = '140' collidable = 'true'>
			<animation sheet='key' x='-77' y='-30'/>
			<!-- The formatting of these actions is as follows:
			The Pick up. action is on the highest level and given a name so it appears in-menu.
			If this option is selected, the key is removed from the map and a flag is set.-->
			
			<action command='removeSprite' name='Pick up.'>
				<args>key, Room02</args>
				<action command='playSound' noDelay='true'>
					<args>openSound</args>
					<action command='setGameState'>
						<args>gotKey,true</args>
					</action>
				</action>
			</action>
		</sprite>
		
		<!-- here we're adding in our BG and FG. This is the second half of our 
		optimization. To avoid creating a dozen sprites for every single tile, we
		specify that this image has been sliced up into tiles. Then we just specify
		how many there are and how big they are, and the system will find all of them
		and tile them correctly based on their names. This also makes it very easy
		to transition from using one big image to a sliced up one. -->

		<!-- Note no depthing specification puts a sprite in the background. Not 
		specifying coordinates also puts them at (0,0) by default (top-left corner). -->
		<sprite name='Room02BG'>
			<animation sheet='Room02' sliced='true' numCols='3' numRows='2' colSize='500' rowSize='500'/>
		</sprite>
	</room>
</rooms>
</sburb>
